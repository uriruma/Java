/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package View;

import static Controller.AuthorController.getAuthorByFullName;
import static Controller.AuthorController.getAuthors;
import static Controller.AuthorController.modifyAuthor;
import static Data.DataValidation.isValidString;
import Exception.AuthorException;
import Model.Author;
import java.awt.Color;
import javax.swing.JOptionPane;

/**
 *
 * @author uriru
 */
public class ModifyAuthor extends javax.swing.JDialog {

    Author authorSelected;

    /**
     * Creates new form ModifyAuthor
     *
     * @param parent
     */
    public ModifyAuthor(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        getContentPane().setBackground(Color.white);
        //this is a warning label used later
        warningLabel1.setVisible(false);
        //add all the authors to the combobox
        for (Author a : getAuthors()) {
            authorComboBox.addItem(a.getName() + " " + a.getSurname() + " " + a.getSecondSurname());
        }
        //author selected by default by the full name
        String completeName = (String) authorComboBox.getSelectedItem();
        String[] fullName = completeName.split(" ");
        try {
            //this will fill the texts fields
            authorSelected = getAuthorByFullName(fullName[0], fullName[1], fullName[2]);
            nameTextField.setText(authorSelected.getName());
            surnameTextField.setText(authorSelected.getSurname());
            secondSurnameTextField.setText(authorSelected.getSecondSurname());
            countryComboBox.setSelectedItem(authorSelected.getCountry());
        } catch (AuthorException ex) {
            //it shouldn't be done, but just in case
            JOptionPane.showConfirmDialog(this, ex.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        authorLabel = new javax.swing.JLabel();
        authorComboBox = new javax.swing.JComboBox<>();
        confirmAuthorButton = new javax.swing.JButton();
        nameLabel = new javax.swing.JLabel();
        surnameLabel = new javax.swing.JLabel();
        secondSurnameLabel = new javax.swing.JLabel();
        countryLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        surnameTextField = new javax.swing.JTextField();
        secondSurnameTextField = new javax.swing.JTextField();
        warningLabel1 = new javax.swing.JLabel();
        countryComboBox = new javax.swing.JComboBox<>();
        backButton1 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        authorLabel.setFont(new java.awt.Font("Calibri", 0, 14)); // NOI18N
        authorLabel.setText("Author");

        authorComboBox.setEditable(true);
        authorComboBox.setMaximumRowCount(40);
        authorComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                authorComboBoxItemStateChanged(evt);
            }
        });

        confirmAuthorButton.setText("Confirm");
        confirmAuthorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmAuthorButtonActionPerformed(evt);
            }
        });

        nameLabel.setText("Name:");

        surnameLabel.setText("Surname:");

        secondSurnameLabel.setText("Second Surname:");

        countryLabel.setText("Country:");

        warningLabel1.setFont(new java.awt.Font("Calibri", 0, 10)); // NOI18N
        warningLabel1.setText("You must  rewrite a valid string in the red camps.");

        countryComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Russia", "Germany", "United Kingdom", "France", "Italy", "Spain", "Ukraine", "Poland", "Romania", "Netherlands", "Belgium" }));
        countryComboBox.setActionCommand("");

        backButton1.setFont(new java.awt.Font("Calibri", 0, 24)); // NOI18N
        backButton1.setText("<");
        backButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(warningLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(confirmAuthorButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(countryLabel)
                            .addComponent(secondSurnameLabel)
                            .addComponent(surnameLabel)
                            .addComponent(nameLabel))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(surnameTextField)
                            .addComponent(secondSurnameTextField)
                            .addComponent(countryComboBox, 0, 0, Short.MAX_VALUE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(backButton1)
                        .addGap(56, 56, 56)
                        .addComponent(authorLabel)
                        .addGap(18, 18, 18)
                        .addComponent(authorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton1)
                    .addComponent(authorLabel)
                    .addComponent(authorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(surnameLabel)
                        .addGap(27, 27, 27)
                        .addComponent(secondSurnameLabel)
                        .addGap(30, 30, 30)
                        .addComponent(countryLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(surnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addComponent(secondSurnameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(countryComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmAuthorButton)
                    .addComponent(warningLabel1))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void confirmAuthorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmAuthorButtonActionPerformed
        //collecting the author Strings text fields with a trim for the spaces at the beggining or the end
        String name = nameTextField.getText().trim();
        String surname = surnameTextField.getText().trim();
        String secondSurname = secondSurnameTextField.getText().trim();
        String country = (String) countryComboBox.getSelectedItem();
        boolean valid = true;//if any of the camps is not valid this will be false

        //if any text field is in blank an error is shown
        if (name.isEmpty() || surname.isEmpty() || secondSurname.isEmpty()) {
            JOptionPane.showMessageDialog(this, "You must fill every camp of the Author", "Empty data", JOptionPane.ERROR_MESSAGE);
        } else {
            //here we check if all the Strings are valid
            if (isValidString(name)) {
                nameTextField.setForeground(Color.GREEN);//if it is valid is green
            } else {
                nameTextField.setForeground(Color.RED);//if it is not valid is red
                valid = false;
            }
            if (isValidString(surname)) {
                surnameTextField.setForeground(Color.GREEN);
            } else {
                surnameTextField.setForeground(Color.RED);
                valid = false;
            }
            if (isValidString(secondSurname)) {
                secondSurnameTextField.setForeground(Color.GREEN);
            } else {
                secondSurnameTextField.setForeground(Color.RED);
                valid = false;
            }
        }
        //if all the variables are valid then we proceed to modify the author
        if (valid) {
            warningLabel1.setVisible(false);
            String full = name + " " + surname + " " + secondSurname + " " + country;//concat all the strings with a space between
            try {
                if (authorSelected.getName().equalsIgnoreCase(name) && authorSelected.getSurname().equalsIgnoreCase(surname) && authorSelected.getSecondSurname().equalsIgnoreCase(secondSurname) && !(authorSelected.getCountry().equalsIgnoreCase(country))) {
                    modifyAuthor(authorSelected, full);
                    JOptionPane.showMessageDialog(this, "Author modified with exit!", "OK", JOptionPane.INFORMATION_MESSAGE);
                    dispose();
                } else if (getAuthors().contains(new Author(name, surname, secondSurname))) {
                    JOptionPane.showMessageDialog(this, "Author repeated!", "KO", JOptionPane.WARNING_MESSAGE);
                } else {
                    modifyAuthor(authorSelected, full);
                    JOptionPane.showMessageDialog(this, "Author modified with exit!", "OK", JOptionPane.INFORMATION_MESSAGE);
                    dispose();//this will close the window 
                }

            } catch (AuthorException e) {
                JOptionPane.showMessageDialog(this, e.getMessage(), "Unable to modify the author", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            warningLabel1.setVisible(true);//we make the warning visible to let the user fix the error
        }
    }//GEN-LAST:event_confirmAuthorButtonActionPerformed

    private void authorComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_authorComboBoxItemStateChanged
        //load data in textboxs from the author selected by the full name
        String completeName = (String) authorComboBox.getSelectedItem();
        String[] fullName = completeName.split(" ");
        try {
            authorSelected = getAuthorByFullName(fullName[0], fullName[1], fullName[2]);
            nameTextField.setText(authorSelected.getName());
            surnameTextField.setText(authorSelected.getSurname());
            secondSurnameTextField.setText(authorSelected.getSecondSurname());
            countryComboBox.setSelectedItem(authorSelected.getCountry());
        } catch (AuthorException ex) {
            //it shouldn't be done, but just in case
            JOptionPane.showConfirmDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_authorComboBoxItemStateChanged

    private void backButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_backButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ModifyAuthor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ModifyAuthor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ModifyAuthor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ModifyAuthor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ModifyAuthor dialog = new ModifyAuthor(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> authorComboBox;
    private javax.swing.JLabel authorLabel;
    private javax.swing.JButton backButton1;
    private javax.swing.JButton confirmAuthorButton;
    private javax.swing.JComboBox<String> countryComboBox;
    private javax.swing.JLabel countryLabel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel secondSurnameLabel;
    private javax.swing.JTextField secondSurnameTextField;
    private javax.swing.JLabel surnameLabel;
    private javax.swing.JTextField surnameTextField;
    private javax.swing.JLabel warningLabel1;
    // End of variables declaration//GEN-END:variables
}
